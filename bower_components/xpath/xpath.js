/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,9],$V2=[1,11],$V3=[1,13],$V4=[1,17],$V5=[1,18],$V6=[1,21],$V7=[1,22],$V8=[1,32],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,14],$Vg=[1,15],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,39],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[5,11,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,38],$Vw=[1,51],$Vx=[5,11,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,33,35,37,38],$Vy=[2,53],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,62],$VD=[5,11,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,33,35,38],$VE=[29,48,49,50,51,52,53],$VF=[5,11,15,16,17,18,19,20,21,22,23,24,25,26,27,31,38],$VG=[5,11,15,16,17,18,31,38],$VH=[5,11,15,16,17,18,19,20,21,22,31,38],$VI=[5,11,15,16,17,18,19,20,21,22,23,24,31,38],$VJ=[11,31];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"xpath_expr":3,"expr":4,"EOF":5,"base_expr":6,"op_expr":7,"path_expr":8,"filter_expr":9,"LPAREN":10,"RPAREN":11,"func_call":12,"VAR":13,"literal":14,"OR":15,"AND":16,"EQ":17,"NEQ":18,"LT":19,"LTE":20,"GT":21,"GTE":22,"PLUS":23,"MINUS":24,"MULT":25,"DIV":26,"MOD":27,"UNION":28,"QNAME":29,"arg_list":30,"COMMA":31,"loc_path":32,"SLASH":33,"rel_loc_path":34,"DBL_SLASH":35,"predicate":36,"LBRACK":37,"RBRACK":38,"step":39,"step_unabbr":40,"DOT":41,"DBL_DOT":42,"step_body":43,"node_test":44,"axis_specifier":45,"DBL_COLON":46,"AT":47,"WILDCARD":48,"NSWILDCARD":49,"NODETYPE_NODE":50,"NODETYPE_TEXT":51,"NODETYPE_COMMENT":52,"NODETYPE_PROCINSTR":53,"STR":54,"NUM":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"LPAREN",11:"RPAREN",13:"VAR",15:"OR",16:"AND",17:"EQ",18:"NEQ",19:"LT",20:"LTE",21:"GT",22:"GTE",23:"PLUS",24:"MINUS",25:"MULT",26:"DIV",27:"MOD",28:"UNION",29:"QNAME",31:"COMMA",33:"SLASH",35:"DBL_SLASH",37:"LBRACK",38:"RBRACK",41:"DOT",42:"DBL_DOT",46:"DBL_COLON",47:"AT",48:"WILDCARD",49:"NSWILDCARD",50:"NODETYPE_NODE",51:"NODETYPE_TEXT",52:"NODETYPE_COMMENT",53:"NODETYPE_PROCINSTR",54:"STR",55:"NUM"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[4,1],[6,3],[6,1],[6,1],[6,1],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,2],[7,3],[12,4],[12,3],[30,3],[30,1],[8,1],[8,3],[8,3],[8,3],[8,3],[9,2],[9,2],[36,3],[32,1],[32,2],[32,2],[32,1],[34,1],[34,3],[34,3],[39,1],[39,1],[39,1],[40,2],[40,1],[43,1],[43,2],[45,2],[45,1],[44,1],[44,1],[44,1],[44,3],[44,3],[44,3],[44,3],[44,4],[14,1],[14,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3: case 4: case 5:
  this.$ = $$[$0]; 
break;
case 6: case 36:
 this.$ = $$[$0-1]; 
break;
case 8:
 this.$ = new xpathmodels.XPathVariableReference($$[$0]); 
break;
case 10:
 this.$ = new xpathmodels.XPathBoolExpr({"type": "or", "left": $$[$0-2], "right": $$[$0]}); 
break;
case 11:
 this.$ = new xpathmodels.XPathBoolExpr({"type": "and", "left": $$[$0-2], "right": $$[$0]}); 
break;
case 12:
 this.$ = new xpathmodels.XPathEqExpr({"type": "==", "left": $$[$0-2], "right": $$[$0]}); 
break;
case 13:
 this.$ = new xpathmodels.XPathEqExpr({"type": "!=", "left": $$[$0-2], "right": $$[$0]}); 
break;
case 14:
 this.$ = new xpathmodels.XPathCmpExpr({"type": "<", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 15:
 this.$ = new xpathmodels.XPathCmpExpr({"type": "<=", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 16:
 this.$ = new xpathmodels.XPathCmpExpr({"type": ">", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 17:
 this.$ = new xpathmodels.XPathCmpExpr({"type": ">=", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 18:
 this.$ = new xpathmodels.XPathArithExpr({"type": "+", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 19:
 this.$ = new xpathmodels.XPathArithExpr({"type": "-", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 20:
 this.$ = new xpathmodels.XPathArithExpr({"type": "*", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 21:
 this.$ = new xpathmodels.XPathArithExpr({"type": "/", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 22:
 this.$ = new xpathmodels.XPathArithExpr({"type": "%", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 23:
 this.$ = new xpathmodels.XPathNumNegExpr({"type": "num-neg", "value":$$[$0]}); 
break;
case 24:
 this.$ = new xpathmodels.XPathUnionExpr({"type": "union", "left":$$[$0-2], "right": $$[$0]}); 
break;
case 25:
 this.$ = new xpathmodels.XPathFuncExpr({id: $$[$0-3], args: $$[$0-1]}); 
break;
case 26:
 this.$ = new xpathmodels.XPathFuncExpr({id: $$[$0-2], args: []}); 
break;
case 27:
 var args = $$[$0-2];
                                      args.push($$[$0]);
                                      this.$ = args; 
break;
case 28:
 this.$ = [$$[$0]]; 
break;
case 30:
 this.$ = new xpathmodels.XPathPathExpr({
                                                                    initial_context: xpathmodels.XPathInitialContextEnum.EXPR,
                                                                    filter: $$[$0-2], steps: $$[$0]}); 
break;
case 31:
 var steps = $$[$0];
                                                      steps.splice(0, 0, new xpathmodels.XPathStep({
                                                                                axis: xpathmodels.XPathAxisEnum.DESCENDANT_OR_SELF, 
                                                                                test: xpathmodels.XPathTestEnum.TYPE_NODE}));
                                                      this.$ = new xpathmodels.XPathPathExpr({
                                                                    initial_context: xpathmodels.XPathInitialContextEnum.EXPR,
                                                                    filter: $$[$0-2], steps: steps}); 
break;
case 32:
 // could eliminate filterExpr wrapper, but this makes tests pass as-is
                                                      var filterExpr = new xpathmodels.XPathFilterExpr({expr: $$[$0-2]});
                                                      this.$ = new xpathmodels.XPathPathExpr({
                                                                    initial_context: xpathmodels.XPathInitialContextEnum.EXPR,
                                                                    filter: filterExpr, steps: $$[$0]}); 
break;
case 33:
 var steps = $$[$0];
                                                      // could eliminate filterExpr wrapper, but this makes tests pass as-is
                                                      var filterExpr = new xpathmodels.XPathFilterExpr({expr: $$[$0-2]});
                                                      steps.splice(0, 0, new xpathmodels.XPathStep({
                                                                                axis: xpathmodels.XPathAxisEnum.DESCENDANT_OR_SELF, 
                                                                                test: xpathmodels.XPathTestEnum.TYPE_NODE}));
                                                      this.$ = new xpathmodels.XPathPathExpr({
                                                                    initial_context: xpathmodels.XPathInitialContextEnum.EXPR,
                                                                    filter: filterExpr, steps: steps}); 
break;
case 34:
 this.$ = new xpathmodels.XPathFilterExpr({expr: $$[$0-1], predicates: [$$[$0]]}); 
break;
case 35:
 var filterExpr = $$[$0-1];
                                        filterExpr.predicates.push($$[$0]);
                                        this.$ = filterExpr; 
break;
case 37:
 this.$ = new xpathmodels.XPathPathExpr({initial_context: xpathmodels.XPathInitialContextEnum.RELATIVE,
                                                                      steps: $$[$0]}); 
break;
case 38:
 this.$ = new xpathmodels.XPathPathExpr({initial_context: xpathmodels.XPathInitialContextEnum.ROOT,
                                                                      steps: $$[$0]}); 
break;
case 39:
 var steps = $$[$0];
                                              // insert descendant step into beginning
                                              steps.splice(0, 0, new xpathmodels.XPathStep({axis: xpathmodels.XPathAxisEnum.DESCENDANT_OR_SELF, 
                                                                                test: xpathmodels.XPathTestEnum.TYPE_NODE}));
                                              this.$ = new xpathmodels.XPathPathExpr({initial_context: xpathmodels.XPathInitialContextEnum.ROOT,
                                                                      steps: steps}); 
break;
case 40:
 this.$ = new xpathmodels.XPathPathExpr({initial_context: xpathmodels.XPathInitialContextEnum.ROOT,
                                                              steps: []});
break;
case 41:
 this.$ = [$$[$0]];
break;
case 42:
 var path = $$[$0-2];
                                            path.push($$[$0]);
                                            this.$ = path; 
break;
case 43:
 var path = $$[$0-2];
                                            path.push(new xpathmodels.XPathStep({axis: xpathmodels.XPathAxisEnum.DESCENDANT_OR_SELF, 
                                                                     test: xpathmodels.XPathTestEnum.TYPE_NODE}));
                                            path.push($$[$0]);
                                            this.$ = path; 
break;
case 44: case 48:
 this.$ = $$[$0]; 
break;
case 45:
 this.$ = new xpathmodels.XPathStep({axis: xpathmodels.XPathAxisEnum.SELF, 
                                                          test: xpathmodels.XPathTestEnum.TYPE_NODE}); 
break;
case 46:
 this.$ = new xpathmodels.XPathStep({axis: xpathmodels.XPathAxisEnum.PARENT, 
                                                          test: xpathmodels.XPathTestEnum.TYPE_NODE}); 
break;
case 47:
 var step = $$[$0-1];
                                            step.predicates.push($$[$0]);
                                            this.$ = step; 
break;
case 49:
 var nodeTest = $$[$0]; // temporary dict with appropriate args
                                          nodeTest.axis = xpathmodels.XPathAxisEnum.CHILD;
                                          this.$ = new xpathmodels.XPathStep(nodeTest); 
break;
case 50:
 var nodeTest = $$[$0];  // temporary dict with appropriate args
                                          nodeTest.axis = $$[$0-1]; // add axis
                                          this.$ = new xpathmodels.XPathStep(nodeTest); 
break;
case 51:
 this.$ = xpathmodels.validateAxisName($$[$0-1]); 
break;
case 52:
 this.$ = xpathmodels.XPathAxisEnum.ATTRIBUTE; 
break;
case 53:
 this.$ = {"test": xpathmodels.XPathTestEnum.NAME, "name": $$[$0]}; 
break;
case 54:
 this.$ = {"test": xpathmodels.XPathTestEnum.NAME_WILDCARD}; 
break;
case 55:
 this.$ = {"test": xpathmodels.XPathTestEnum.NAMESPACE_WILDCARD, "namespace": $$[$0]}; 
break;
case 56:
 this.$ = {"test": xpathmodels.XPathTestEnum.TYPE_NODE}; 
break;
case 57:
 this.$ = {"test": xpathmodels.XPathTestEnum.TYPE_TEXT}; 
break;
case 58:
 this.$ = {"test": xpathmodels.XPathTestEnum.TYPE_COMMENT}; 
break;
case 59:
 this.$ = {"test": xpathmodels.XPathTestEnum.TYPE_PROCESSING_INSTRUCTION, "literal": null}; 
break;
case 60:
 this.$ = {"test": xpathmodels.XPathTestEnum.TYPE_PROCESSING_INSTRUCTION, "literal": $$[$0-1]}; 
break;
case 61:
 this.$ = new xpathmodels.XPathStringLiteral($$[$0]); 
break;
case 62:
 this.$ = new xpathmodels.XPathNumericLiteral($$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{1:[3]},{5:[1,33],15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu},o($Vv,[2,2],{36:50,33:[1,48],35:[1,49],37:$Vw}),o($Vv,[2,3]),o($Vv,[2,4]),o($Vv,[2,5],{36:54,33:[1,52],35:[1,53],37:$Vw}),{4:55,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},o($Vx,[2,7]),o($Vx,[2,8]),o($Vx,[2,9]),{4:56,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},o($Vv,[2,29]),o($Vx,$Vy,{10:[1,57],46:$Vz}),o($Vx,[2,61]),o($Vx,[2,62]),o($Vv,[2,37],{33:$VA,35:$VB}),o($Vv,[2,40],{39:19,40:20,43:23,44:24,45:25,34:61,29:$VC,41:$V6,42:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve}),{29:$VC,34:63,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},o($VD,[2,41]),o($VD,[2,44],{36:64,37:$Vw}),o($VD,[2,45]),o($VD,[2,46]),o($Vx,[2,48]),o($Vx,[2,49]),{29:[1,66],44:65,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},o($Vx,[2,54]),o($Vx,[2,55]),{10:[1,67]},{10:[1,68]},{10:[1,69]},{10:[1,70]},o($VE,[2,52]),{1:[2,1]},{4:71,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:72,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:73,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:74,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:75,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:76,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:77,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:78,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:79,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:80,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:81,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:82,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:83,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{4:84,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{29:$VC,34:85,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},{29:$VC,34:86,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},o($Vx,[2,34]),{4:87,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},{29:$VC,34:88,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},{29:$VC,34:89,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},o($Vx,[2,35]),{11:[1,90],15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu},o($VF,[2,23],{28:$Vu}),{4:93,6:3,7:4,8:5,9:6,10:$V0,11:[1,92],12:8,13:$V1,14:10,24:$V2,29:$V3,30:91,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},o($VE,[2,51]),{29:$VC,39:94,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},{29:$VC,39:95,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve},o($Vv,[2,38],{33:$VA,35:$VB}),o($Vx,$Vy,{46:$Vz}),o($Vv,[2,39],{33:$VA,35:$VB}),o($Vx,[2,47]),o($Vx,[2,50]),o($Vx,$Vy),{11:[1,96]},{11:[1,97]},{11:[1,98]},{11:[1,99],54:[1,100]},o([5,11,31,38],[2,10],{15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o([5,11,15,31,38],[2,11],{16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VG,[2,12],{19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VG,[2,13],{19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VH,[2,14],{23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VH,[2,15],{23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VH,[2,16],{23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VH,[2,17],{23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VI,[2,18],{25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VI,[2,19],{25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VF,[2,20],{28:$Vu}),o($VF,[2,21],{28:$Vu}),o($VF,[2,22],{28:$Vu}),o($Vv,[2,24]),o($Vv,[2,32],{33:$VA,35:$VB}),o($Vv,[2,33],{33:$VA,35:$VB}),{15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,38:[1,101]},o($Vv,[2,30],{33:$VA,35:$VB}),o($Vv,[2,31],{33:$VA,35:$VB}),o($Vx,[2,6]),{11:[1,102],31:[1,103]},o($Vx,[2,26]),o($VJ,[2,28],{15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu}),o($VD,[2,42]),o($VD,[2,43]),o($Vx,[2,56]),o($Vx,[2,57]),o($Vx,[2,58]),o($Vx,[2,59]),{11:[1,104]},o($Vx,[2,36]),o($Vx,[2,25]),{4:105,6:3,7:4,8:5,9:6,10:$V0,12:8,13:$V1,14:10,24:$V2,29:$V3,32:12,33:$V4,34:16,35:$V5,39:19,40:20,41:$V6,42:$V7,43:23,44:24,45:25,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg},o($Vx,[2,60]),o($VJ,[2,27],{15:$Vh,16:$Vi,17:$Vj,18:$Vk,19:$Vl,20:$Vm,21:$Vn,22:$Vo,23:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu})],
defaultActions: {33:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */ 
break;
case 1: debuglog("NODETYPE", yy_.yytext); return "NODETYPE_NODE"; 
break;
case 2: debuglog("NODETYPE", yy_.yytext); return "NODETYPE_TEXT"; 
break;
case 3: debuglog("NODETYPE", yy_.yytext); return "NODETYPE_COMMENT"; 
break;
case 4: debuglog("NODETYPE", yy_.yytext); return "NODETYPE_PROCINSTR"; 
break;
case 5: this.begin("OP_CONTEXT"); yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-1); debuglog("VAR", yy_.yytext); return "VAR"; 
break;
case 6: this.begin("OP_CONTEXT"); 
                                     yy_.yytext = yy_.yytext.substr(0, yy_.yyleng-2);
                                     debuglog("NSWILDCARD", yy_.yytext); return "NSWILDCARD"; 
break;
case 7: this.begin("OP_CONTEXT"); debuglog("QNAME", yy_.yytext); return "QNAME"; 
break;
case 8: this.begin("OP_CONTEXT"); debuglog("WILDCARD", yy_.yytext); return "WILDCARD"; 
break;
case 9: this.begin("VAL_CONTEXT"); debuglog("MULT", yy_.yytext); return "MULT"; 
break;
case 10: this.begin("VAL_CONTEXT"); debuglog("AND", yy_.yytext); return "AND"; 
break;
case 11: this.begin("VAL_CONTEXT"); debuglog("OR", yy_.yytext); return "OR"; 
break;
case 12: this.begin("VAL_CONTEXT"); debuglog("DIV", yy_.yytext); return "DIV"; 
break;
case 13: this.begin("VAL_CONTEXT"); debuglog("MOD", yy_.yytext); return "MOD"; 
break;
case 14: this.begin("OP_CONTEXT"); debuglog("NUM", yy_.yytext); return "NUM"; 
break;
case 15: this.begin("VAL_CONTEXT"); debuglog("EQ", yy_.yytext); return "EQ"; 
break;
case 16: this.begin("VAL_CONTEXT"); debuglog("NEQ", yy_.yytext); return "NEQ"; 
break;
case 17: this.begin("VAL_CONTEXT"); debuglog("LTE", yy_.yytext); return "LTE"; 
break;
case 18: this.begin("VAL_CONTEXT"); debuglog("LT", yy_.yytext); return "LT"; 
break;
case 19: this.begin("VAL_CONTEXT"); debuglog("GTE", yy_.yytext); return "GTE"; 
break;
case 20: this.begin("VAL_CONTEXT"); debuglog("GT", yy_.yytext); return "GT"; 
break;
case 21: this.begin("VAL_CONTEXT"); debuglog("PLUS", yy_.yytext); return "PLUS"; 
break;
case 22: this.begin("VAL_CONTEXT"); debuglog("MINUS", yy_.yytext); return "MINUS"; 
break;
case 23: this.begin("VAL_CONTEXT"); debuglog("UNION", yy_.yytext); return "UNION"; 
break;
case 24: this.begin("VAL_CONTEXT"); debuglog("DBL", yy_.yytext); return "DBL_SLASH"; 
break;
case 25: this.begin("VAL_CONTEXT"); debuglog("SLASH", yy_.yytext); return "SLASH"; 
break;
case 26: this.begin("VAL_CONTEXT"); debuglog("LBRACK", yy_.yytext); return "LBRACK"; 
break;
case 27: this.begin("OP_CONTEXT");  debuglog("RBRACK", yy_.yytext); return "RBRACK"; 
break;
case 28: this.begin("VAL_CONTEXT"); debuglog("LPAREN", yy_.yytext); return "LPAREN"; 
break;
case 29: this.begin("OP_CONTEXT");  debuglog("RPAREN", yy_.yytext); return "RPAREN"; 
break;
case 30: this.begin("OP_CONTEXT");  debuglog("DBL", yy_.yytext); return "DBL_DOT"; 
break;
case 31: this.begin("OP_CONTEXT");  debuglog("DOT", yy_.yytext); return "DOT"; 
break;
case 32: this.begin("VAL_CONTEXT"); debuglog("AT", yy_.yytext); return "AT"; 
break;
case 33: this.begin("VAL_CONTEXT"); debuglog("DBL", yy_.yytext); return "DBL_COLON"; 
break;
case 34: this.begin("VAL_CONTEXT"); debuglog("COMMA", yy_.yytext); return "COMMA"; 
break;
case 35: this.begin("OP_CONTEXT"); yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); debuglog("STR", yy_.yytext); return "STR"; 
break;
case 36:return 5;
break;
}
},
rules: [/^(?:((\s+)))/,/^(?:node(?=(((\s+))?\()))/,/^(?:text(?=(((\s+))?\()))/,/^(?:comment(?=(((\s+))?\()))/,/^(?:processing-instruction(?=(((\s+))?\()))/,/^(?:\$([A-Za-z_][A-Za-z0-9._-]*(:[A-Za-z_][A-Za-z0-9._-]*)?))/,/^(?:([A-Za-z_][A-Za-z0-9._-]*):\*)/,/^(?:([A-Za-z_][A-Za-z0-9._-]*(:[A-Za-z_][A-Za-z0-9._-]*)?))/,/^(?:\*)/,/^(?:\*)/,/^(?:(and))/,/^(?:(or))/,/^(?:(div))/,/^(?:(mod))/,/^(?:(([0-9])+(\.([0-9])*)?|(\.([0-9])+)))/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:\+)/,/^(?:-)/,/^(?:\|)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\.\.)/,/^(?:\.)/,/^(?:@)/,/^(?:::)/,/^(?:,)/,/^(?:("[^"\""]*"|'[^'\'']*'))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true},"OP_CONTEXT":{"rules":[0,1,2,3,4,5,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true},"VAL_CONTEXT":{"rules":[0,1,2,3,4,5,6,7,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xpath;
exports.Parser = xpath.Parser;
exports.parse = function () { return xpath.parse.apply(xpath, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}